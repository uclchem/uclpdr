program create_particles

   implicit none

   integer :: i,j,k,l
   integer :: N_x,N_y,N_z
   real(kind=8) :: AV_fac,T_gas,T_dust
   real(kind=8), dimension(1:3) :: AV_max
   real(kind=8), dimension(1:6) :: AV_step,AV_min
   real(kind=8), allocatable    :: AV(:,:),position(:,:),density(:)
   character :: type

   AV_fac = 6.289D-22

   T_gas  = 50.0D0
   T_dust = 20.0D0

   AV_step = 0.1D0
   AV_min = 1.0D-3
   AV_max = 2.0D+1

   ! Small minimum A_V, suitable for models with weak UV radiation fields
   AV_min(1) = 1.0D-7
   AV_min(2) = 1.0D-7
   AV_max = 2.0D+1

!!$   ! Large minimum A_V, suitable for models with strong UV radiation fields
!!$   AV_min(1) = 1.0D-5
!!$   AV_min(2) = 1.0D-5
!!$   AV_max = 2.0D+1

!!$   ! Large cloud with N_H,max ~ 1E25 cm^-2, suitable for XDR models
!!$   AV_min(1) = 1.0D-5
!!$   AV_min(2) = 1.0D-5
!!$   AV_max = 6.0D+3

   ! 1-dimensional model (zero y- and z-axis dimensions)
   AV_step(3:6) = 1.0D0
   AV_max(2:3) = 0.0D+0

!!$   ! 3-dimensional model (maximum y- and z-axis A_V's of 10 mag)
!!$   AV_step(3:6) = 1.0D0
!!$   AV_max(2:3) = 1.0D+1

   N_x = nint(log10(AV_max(1))-log10(AV_min(1)))*nint(9.0D0/AV_step(1)) &
      & +nint(log10(AV_max(1))-log10(AV_min(2)))*nint(9.0D0/AV_step(2))+3

   N_y = nint(log10(AV_max(2))-log10(AV_min(3)))*nint(9.0D0/AV_step(3)) &
      & +nint(log10(AV_max(2))-log10(AV_min(4)))*nint(9.0D0/AV_step(4))+3

   N_z = nint(log10(AV_max(3))-log10(AV_min(5)))*nint(9.0D0/AV_step(5)) &
      & +nint(log10(AV_max(3))-log10(AV_min(6)))*nint(9.0D0/AV_step(6))+3

   allocate(AV(1:N_x*N_y*N_z,1:3),position(1:N_x*N_y*N_z,1:3),density(1:N_x*N_y*N_z))

   AV = 0.0D0
   position = 0.0D0
   density = 0.0D0

   i = 1
   AV(i,3) = 0.0D0
   position(i,3) = 0.0D0
   do k=1,nint(2*AV_max(3)/AV_step(5)+1)
      AV(i,2) = 0.0D0
      position(i,2) = 0.0D0
      do j=1,nint(2*AV_max(2)/AV_step(3)+1)

         AV(i,1) = 0.0D0
         position(i,1) = 0.0D0
         density(i) = density_profile(AV(i,1))
         i = i + 1

         AV(i,1) = AV_min(1)
         AV(i,2) = AV(i-1,2) ; AV(i,3) = AV(i-1,3)
         density(i) = density_profile(AV(i,1))
         position(i,1) = position(i-1,1) + (AV(i,1) - AV(i-1,1))/AV_fac/(0.5*(density(i)+density(i-1)))
         position(i,2) = position(i-1,2) ; position(i,3) = position(i-1,3)
         i = i + 1

         do
            AV(i,1) = AV(i-1,1) + AV_step(1)*10.0D0**(floor(log10(AV(i-1,1)*1.001D0)))
            AV(i,2) = AV(i-1,2) ; AV(i,3) = AV(i-1,3)
            density(i) = density_profile(AV(i,1))
            position(i,1) = position(i-1,1) + (AV(i,1) - AV(i-1,1))/AV_fac/(0.5*(density(i)+density(i-1)))
            position(i,2) = position(i-1,2) ; position(i,3) = position(i-1,3)
            i = i + 1
            if(AV(i-1,1).GE.AV_max(1)*0.999D0) exit
         end do
         l = i
         do
            AV(i,1) = AV(i-1,1) - AV_step(2)*10.0D0**(floor(log10(AV(i-1,1)*0.999D0)))
            AV(i,2) = AV(i-1,2) ; AV(i,3) = AV(i-1,3)
            density(i) = density_profile(AV(i,1))
            position(i,1) = position(i-1,1) + (AV(i-1,1) - AV(i,1))/AV_fac/(0.5*(density(i)+density(i-1)))
            position(i,2) = position(i-1,2) ; position(i,3) = position(i-1,3)
            i = i + 1
            if(AV(i-1,1).LE.AV_min(2)*1.001D0) exit
         end do

         AV(i,1) = 0.0D0
         AV(i,2) = AV(i-1,2) ; AV(i,3) = AV(i-1,3)
         density(i) = density_profile(AV(i,1))
         position(i,1) = position(i-1,1) + (AV(i-1,1) - AV(i,1))/AV_fac/(0.5*(density(i)+density(i-1)))
         position(i,2) = position(i-1,2) ; position(i,3) = position(i-1,3)

         AV(l:i,1) = 2*AV_max(1) - AV(l:i,1)
         i = i + 1

         AV(i,2) = AV(i-1,2)+AV_step(3)
         AV(i,3) = AV(i-1,3)
         position(i,2) = position(i-1,2) + (AV(i,2) - AV(i-1,2))/AV_fac/1.0D3
         position(i,3) = position(i-1,3)

      end do
      AV(i,3) = AV(i-1,3)+AV_step(5)
      position(i,3) = position(i-1,3) + (AV(i,3) - AV(i-1,3))/AV_fac/1.0D3
   end do
   N_x = i - 1
   write(6,*) 'Total particles:',N_x

   AV(:,1) = AV_max(1) - abs(AV(:,1)-AV_max(1))
   i = maxloc(AV(1:N_x,1),DIM=1)
   write(6,*) 'Maximum A_V(x):',AV(i,1),2*i-1
!!$   position(:,1) = position(:,1) - position(i,1)

   AV(:,2) = AV_max(2) - abs(AV(:,2)-AV_max(2))
   i = maxloc(AV(1:N_x,2),DIM=1)
   write(6,*) 'Maximum A_V(y):',AV(i,2),2*i-1
!!$   position(:,2) = position(:,2) - position(i,2)

   AV(:,3) = AV_max(3) - abs(AV(:,3)-AV_max(3))
   i = maxloc(AV(1:N_x,3),DIM=1)
   write(6,*) 'Maximum A_V(z):',AV(i,3),2*i-1
!!$   position(:,3) = position(:,3) - position(i,3)

   open(unit=1,file='cloud.dat',status='REPLACE')
   write(1,"(A)") 'Particle # ,      x (cm)      ,      y (cm)      ,      z (cm)      ,  n_H (c^m-3)  ,   T_gas (K)   ,  T_dust (K)   , chi (Draine)  , Type (I|P|D)'
!!$   do i=1,N_x
   do i=1,N_x/2+1
      type = 'P'
      write(1,"(I10,SP,3(' ,',ES17.9),SS,4(' ,',ES14.7),' ,',A2)") i,position(i,:),density(i),T_gas,T_dust,0,type
   end do
   close(1)

   stop

contains

function density_profile(AV) result(density)

   implicit none

   real(kind=8), intent(in) :: AV
   real(kind=8) :: density

!!$   density = 1.759D2
!!$   density = 1.759D3
!!$   density = 1.0D3
   density = 3.0D4
!!$   density = 10.0D0**5.5
!!$   density = 100.0D0 + 5000*AV

end function density_profile

end program create_particles
